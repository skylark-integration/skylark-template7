{"version":3,"sources":["skylark-utils-templating.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","templating","helpers","types","each","items","options","ret","isFunction","call","this","isArray","hash","reverse","templater","fn","first","last","index","key","inverse","express","data","delimiter","js","expression","func","indexOf","eval","js_compare","condition","partial","partialName","ctx","p","_partials","template","compiled","compile","Object","keys","hashName","root","unless","context","objects","Evented","eachHelper","ifHelper","joinHelper","jsHelper","jsCompareHelper","partialHelper","unlessHelper","withHelper","helperToSlices","string","shiftIndex","j","helperParts","replace","slices","part","match","hashParts","hashContent","stringToBlocks","blocks","_blocks","block","type","content","contextName","helperSlices","helperName","isPartial","helperContext","helperHash","slice","helperContent","elseContent","toSkip","foundClosed","foundElse","depth","inverseContent","Templater","inherit","klassName","init","_options","_helpers","mixin","if","with","_cache","getCompileFn","getCompileInverse","getCompileVar","name","variable","levelsUp","newDepth","isFinite","getCompiledArguments","contextArray","arr","t","resultString","compiledArguments","JSON","stringify","arguments","render","registerHelper","unregisterHelper","undefined","registerPartial","unregisterPartial","defaultTemplater","prototype","main"],"mappings":"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","file":"../skylark-utils-templating.js","sourcesContent":["define('skylark-utils-templating/templating',[\r\n  \"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.templating = {\r\n\t\thelpers : {}\r\n\t};\r\n});\ndefine('skylark-utils-templating/helpers/each',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.each =  function (items, options) {\r\n    var ret = '', i = 0;\r\n    if (types.isFunction(items)) { \r\n      items = items.call(this); \r\n    }\r\n    if (types.isArray(items)) {\r\n      if (options.hash.reverse) {\r\n        items = items.reverse();\r\n      }\r\n      for (i = 0; i < items.length; i++) {\r\n        items[i].templater = this.templater;\r\n        ret += options.fn(items[i], {\r\n          first: i === 0, \r\n          last: i === items.length - 1, \r\n          index: i\r\n        });\r\n      }\r\n      if (options.hash.reverse) {\r\n        items = items.reverse();\r\n      }\r\n    } else {\r\n      for (var key in items) {\r\n        i++;\r\n        items[key].templater = this.templater;\r\n        ret += options.fn(items[key], {key: key});\r\n      }\r\n    }\r\n    if (i > 0) {\r\n      return ret;\r\n    } else {\r\n      return options.inverse(this);\r\n    }\r\n  };\r\n});\ndefine('skylark-utils-templating/helpers/if',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.if =  function (express, options) {\r\n      if (types.isFunction(express)) { \r\n      \texpress = express.call(this); \r\n      }\r\n      if (express) {\r\n        return options.fn(this, options.data);\r\n      }  else {\r\n        return options.inverse(this, options.data);\r\n      }\r\n    };\r\n});\ndefine('skylark-utils-templating/helpers/join',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.join =  function (items, options) {\r\n    if (types.isFunction(items)) { \r\n      items = items.call(this); \r\n    }\r\n    return items.join(options.hash.delimiter);\r\n  };\r\n});\ndefine('skylark-utils-templating/helpers/js',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.js =  function (expression, options) {\r\n    var func;\r\n    if (expression.indexOf('return')>=0) {\r\n      func = '(function(){'+expression+'})';\r\n    } else {\r\n      func = '(function(){return ('+expression+')})';\r\n    }\r\n    return eval.call(this, func).call(this);\r\n  };\r\n});\ndefine('skylark-utils-templating/helpers/js_compare',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.js_compare =  function (expression, options) {\r\n    var func;\r\n    if (expression.indexOf('return')>=0) {\r\n      func = '(function(){'+expression+'})';\r\n    } else {\r\n      func = '(function(){return ('+expression+')})';\r\n    }\r\n    var condition = eval.call(this, func).call(this);\r\n    if (condition) {\r\n      return options.fn(this,options.data);\r\n    } else {\r\n      return options.inverse(this,options.data);   \r\n    }\r\n  };\r\n\r\n});\ndefine('skylark-utils-templating/helpers/partial',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.partial =  function (partialName, options) {\r\n    const ctx = this;\r\n    const p = this.templater._partials[partialName];\r\n    if (!p || (p && !p.template)) {\r\n      return '';\r\n    }\r\n    if (!p.compiled) {\r\n      p.compiled = this.templater.compile(p.template);\r\n    }\r\n    Object.keys(options.hash).forEach(function(hashName) {\r\n      ctx[hashName] = options.hash[hashName];\r\n    });\r\n    return p.compiled(ctx, options.data, options.root);\r\n  };\r\n});\ndefine('skylark-utils-templating/helpers/unless',[\r\n  \"skylark-langx/types\",\r\n  \"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.unless =  function (express, options) {\r\n    if (types.isFunction(express)) { \r\n      express = express.call(this); \r\n    }\r\n    if (!express) {\r\n      return options.fn(this, options.data);\r\n    } else {\r\n      return options.inverse(this, options.data);\r\n    }\r\n  };\r\n});\ndefine('skylark-utils-templating/helpers/with',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.with =  function (context, options) {\r\n    if (types.isFunction(context)) { \r\n      context = context.call(this); \r\n    }\r\n    return options.fn(context);\r\n  };\r\n});\ndefine('skylark-utils-templating/Templater',[\r\n  \"skylark-langx/types\",\r\n  \"skylark-langx/objects\",\r\n  \"skylark-langx/Evented\",\r\n  \"./templating\",\r\n  \"./helpers/each\",\r\n  \"./helpers/if\",\r\n  \"./helpers/join\",\r\n  \"./helpers/js\",\r\n  \"./helpers/js_compare\",\r\n  \"./helpers/partial\",\r\n  \"./helpers/unless\",\r\n  \"./helpers/with\"\r\n],function(\r\n  types, \r\n  objects, \r\n  Evented, \r\n  templating,\r\n  eachHelper, \r\n  ifHelper,\r\n  joinHelper,\r\n  jsHelper,\r\n  jsCompareHelper,\r\n  partialHelper,\r\n  unlessHelper,\r\n  withHelper){\r\n\r\n  \"use strict\";\r\n\r\n  var cache = {};\r\n  function helperToSlices(string) {\r\n    var helperParts = string.replace(/[{}#}]/g, '').split(' ');\r\n    var slices = [];\r\n    var shiftIndex, i, j;\r\n    for (i = 0; i < helperParts.length; i++) {\r\n      var part = helperParts[i];\r\n      if (i === 0) slices.push(part);\r\n      else {\r\n        if (part.indexOf('\"') === 0) {\r\n          // Plain String\r\n          if (part.match(/\"/g).length === 2) {\r\n            // One word string\r\n            slices.push(part);\r\n          }\r\n          else {\r\n            // Find closed Index\r\n            shiftIndex = 0;\r\n            for (j = i + 1; j < helperParts.length; j++) {\r\n              part += ' ' + helperParts[j];\r\n              if (helperParts[j].indexOf('\"') >= 0) {\r\n                shiftIndex = j;\r\n                slices.push(part);\r\n                break;\r\n              }\r\n            }\r\n            if (shiftIndex) i = shiftIndex;\r\n          }\r\n        }\r\n        else {\r\n          if (part.indexOf('=') > 0) {\r\n            // Hash\r\n            var hashParts = part.split('=');\r\n            var hashName = hashParts[0];\r\n            var hashContent = hashParts[1];\r\n            if (hashContent.match(/\"/g).length !== 2) {\r\n              shiftIndex = 0;\r\n              for (j = i + 1; j < helperParts.length; j++) {\r\n                hashContent += ' ' + helperParts[j];\r\n                if (helperParts[j].indexOf('\"') >= 0) {\r\n                  shiftIndex = j;\r\n                  break;\r\n                }\r\n              }\r\n              if (shiftIndex) i = shiftIndex;\r\n            }\r\n            var hash = [hashName, hashContent.replace(/\"/g,'')];\r\n            slices.push(hash);\r\n          }\r\n          else {\r\n            // Plain variable\r\n            slices.push(part);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return slices;\r\n  }\r\n  function stringToBlocks(string) {\r\n    var blocks = [], i, j, k;\r\n    if (!string) return [];\r\n    var _blocks = string.split(/({{[^{^}]*}})/);\r\n    for (i = 0; i < _blocks.length; i++) {\r\n      var block = _blocks[i];\r\n      if (block === '') continue;\r\n      if (block.indexOf('{{') < 0) {\r\n        blocks.push({\r\n          type: 'plain',\r\n          content: block\r\n        });\r\n      } else {\r\n        if (block.indexOf('{/') >= 0) {\r\n          continue;\r\n        }\r\n        if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {\r\n          // Simple variable\r\n          blocks.push({\r\n            type: 'variable',\r\n            contextName: block.replace(/[{}]/g, '')\r\n          });\r\n          continue;\r\n        }\r\n        // Helpers\r\n        var helperSlices = helperToSlices(block);\r\n        var helperName = helperSlices[0];\r\n        var isPartial = helperName === '>';\r\n        var helperContext = [];\r\n        var helperHash = {};\r\n        for (j = 1; j < helperSlices.length; j++) {\r\n          var slice = helperSlices[j];\r\n          if (types.isArray(slice)) {\r\n            // Hash\r\n            helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];\r\n          }\r\n          else {\r\n            helperContext.push(slice);\r\n          }\r\n        }\r\n\r\n        if (block.indexOf('{#') >= 0) {\r\n          // Condition/Helper\r\n          var helperStartIndex = i;\r\n          var helperContent = '';\r\n          var elseContent = '';\r\n          var toSkip = 0;\r\n          var shiftIndex;\r\n          var foundClosed = false, foundElse = false, foundClosedElse = false, depth = 0;\r\n          for (j = i + 1; j < _blocks.length; j++) {\r\n            if (_blocks[j].indexOf('{{#') >= 0) {\r\n              depth ++;\r\n            }\r\n            if (_blocks[j].indexOf('{{/') >= 0) {\r\n              depth --;\r\n            }\r\n            if (_blocks[j].indexOf('{{#' + helperName) >= 0) {\r\n              helperContent += _blocks[j];\r\n              if (foundElse) elseContent += _blocks[j];\r\n              toSkip ++;\r\n            }\r\n            else if (_blocks[j].indexOf('{{/' + helperName) >= 0) {\r\n              if (toSkip > 0) {\r\n                toSkip--;\r\n                helperContent += _blocks[j];\r\n                if (foundElse) elseContent += _blocks[j];\r\n              }\r\n              else {\r\n                shiftIndex = j;\r\n                foundClosed = true;\r\n                break;\r\n              }\r\n            }\r\n            else if (_blocks[j].indexOf('else') >= 0 && depth === 0) {\r\n              foundElse = true;\r\n            }\r\n            else {\r\n              if (!foundElse) helperContent += _blocks[j];\r\n              if (foundElse) elseContent += _blocks[j];\r\n            }\r\n\r\n          }\r\n          if (foundClosed) {\r\n            if (shiftIndex) i = shiftIndex;\r\n            blocks.push({\r\n              type: 'helper',\r\n              helperName: helperName,\r\n              contextName: helperContext,\r\n              content: helperContent,\r\n              inverseContent: elseContent,\r\n              hash: helperHash\r\n            });\r\n          }\r\n        } else if (block.indexOf(' ') > 0) {\r\n          if (isPartial) {\r\n            helperName = 'partial';\r\n            if (helperContext[0]) {\r\n              if (helperContext[0].indexOf('[') === 0) {\r\n                helperContext[0] = helperContext[0].replace(/[[\\]]/g, '');\r\n              } else {\r\n                helperContext[0] = helperContext[0].replace(/\"|'/g, '');\r\n              }\r\n            }\r\n          }\r\n\r\n          blocks.push({\r\n            type: 'helper',\r\n            helperName: helperName,\r\n            contextName: helperContext,\r\n            hash: helperHash\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return blocks;\r\n  }\r\n\r\n\r\n  var Templater = Evented.inherit({\r\n    klassName : \"Templater\",\r\n\r\n    init : function(options,helpers) {\r\n      this._options = options || {};\r\n      this._helpers = objects.mixin({\r\n        \"each\" : eachHelper,\r\n        \"if\" : ifHelper,\r\n        \"join\" : joinHelper,\r\n        \"js\" : jsHelper,\r\n        \"js_compare\" : jsCompareHelper,\r\n        \"partial\" : partialHelper,\r\n        \"unless\" : unlessHelper,\r\n        \"with\" : withHelper,\r\n      },helpers);\r\n\r\n      this._partials = {};\r\n      this._cache = {};\r\n\r\n    },\r\n    compile : function(template) {\r\n      var templater = this;\r\n\r\n      function getCompileFn(block, depth) {\r\n        if (block.content) return compile(block.content, depth);\r\n        else return function () {return ''; };\r\n      }\r\n      function getCompileInverse(block, depth) {\r\n        if (block.inverseContent) return compile(block.inverseContent, depth);\r\n        else return function () {return ''; };\r\n      }\r\n      function getCompileVar(name, ctx) {\r\n        var variable, parts, levelsUp = 0, initialCtx = ctx;\r\n        if (name.indexOf('../') === 0) {\r\n          levelsUp = name.split('../').length - 1;\r\n          var newDepth = ctx.split('_')[1] - levelsUp;\r\n          ctx = 'ctx_' + (newDepth >= 1 ? newDepth : 1);\r\n          parts = name.split('../')[levelsUp].split('.');\r\n        }\r\n        else if (name.indexOf('@global') === 0) {\r\n          ctx = '$.Template7.global';\r\n          parts = name.split('@global.')[1].split('.');\r\n        }\r\n        else if (name.indexOf('@root') === 0) {\r\n          ctx = 'ctx_1';\r\n          parts = name.split('@root.')[1].split('.');\r\n        }\r\n        else {\r\n          parts = name.split('.');\r\n        }\r\n        variable = ctx;\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          if (part.indexOf('@') === 0) {\r\n            if (i > 0) {\r\n              variable += '[(data && data.' + part.replace('@', '') + ')]';\r\n            }\r\n            else {\r\n              variable = '(data && data.' + name.replace('@', '') + ')';\r\n            }\r\n          }\r\n          else {\r\n            if (isFinite(part)) {\r\n              variable += '[' + part + ']';\r\n            }\r\n            else {\r\n              if (part.indexOf('this') === 0) {\r\n                variable = part.replace('this', ctx);\r\n              }\r\n              else {\r\n                variable += '.' + part;       \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return variable;\r\n      }\r\n      function getCompiledArguments(contextArray, ctx) {\r\n        var arr = [];\r\n        for (var i = 0; i < contextArray.length; i++) {\r\n          if (contextArray[i].indexOf('\"') === 0) arr.push(contextArray[i]);\r\n          else {\r\n            arr.push(getCompileVar(contextArray[i], ctx));\r\n          }\r\n        }\r\n        return arr.join(', ');\r\n      }\r\n      function compile(template, depth) {\r\n        depth = depth || 1;\r\n        template = template || t.template;\r\n        if (typeof template !== 'string') {\r\n          throw new Error('Template7: Template must be a string');\r\n        }\r\n        var blocks = stringToBlocks(template);\r\n        if (blocks.length === 0) {\r\n          return function () { return ''; };\r\n        }\r\n        var ctx = 'ctx_' + depth;\r\n        var resultString = '(function (' + ctx + ', data) {\\n';\r\n        if (depth === 1) {\r\n          resultString += ctx + '.templater = this\\n';\r\n          resultString += 'function isArray(arr){return Object.prototype.toString.apply(arr) === \\'[object Array]\\';}\\n';\r\n          resultString += 'function isFunction(func){return (typeof func === \\'function\\');}\\n';\r\n          resultString += 'function c(val, ctx) {if (typeof val !== \"undefined\") {if (isFunction(val)) {return val.call(ctx);} else return val;} else return \"\";}\\n';\r\n        }\r\n        resultString += 'var r = \\'\\';\\n';\r\n        var i, j, context;\r\n        for (i = 0; i < blocks.length; i++) {\r\n          var block = blocks[i];\r\n          // Plain block\r\n          if (block.type === 'plain') {\r\n            resultString += 'r +=\\'' + (block.content).replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/'/g, '\\\\' + '\\'') + '\\';';\r\n            continue;\r\n          }\r\n          var variable, compiledArguments;\r\n          // Variable block\r\n          if (block.type === 'variable') {\r\n            variable = getCompileVar(block.contextName, ctx);\r\n            resultString += 'r += c(' + variable + ', ' + ctx + ');';\r\n          }\r\n          // Helpers block\r\n          if (block.type === 'helper') {\r\n            if (block.helperName in templater._helpers) {\r\n              compiledArguments = getCompiledArguments(block.contextName, ctx);\r\n              resultString += 'r += '+ ctx + '.templater._helpers.' + block.helperName + '.call(' + ctx + ', '  + (compiledArguments && (compiledArguments + ', ')) +'{hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n            }\r\n            else {\r\n              if (block.contextName.length > 0) {\r\n                throw new Error('Missing helper: \"' + block.helperName + '\"');\r\n              } else {\r\n                variable = getCompileVar(block.helperName, ctx);\r\n                resultString += 'if (' + variable + ') {';\r\n                resultString += 'if (isArray(' + variable + ')) {';\r\n                resultString += 'r += '+ ctx + '.templater._helpers.each.call(' + ctx + ', '  + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n                resultString += '}else {';\r\n                resultString += 'r += '+ ctx + '.templater._helpers.with.call(' + ctx + ', '  + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n                resultString += '}}';\r\n              }\r\n            }\r\n          }\r\n        }\r\n        resultString += '\\nreturn r;})';\r\n        return eval.call(window, resultString);\r\n      }\r\n\r\n      var compiled = this._cache[template];\r\n      if (!compiled) {\r\n        var fn = compile(template);\r\n        compiled = this._cache[template] = function(){\r\n          return fn.apply(templater,arguments);\r\n        };\r\n      }\r\n      return compiled;\r\n    },\r\n\r\n    render : function(template,data) {\r\n      var compiled = this.compile(template);\r\n      return compiled(data);\r\n    },\r\n\r\n    registerHelper : function (name, fn) {\r\n      this._helpers[name] = fn;\r\n    },\r\n    \r\n    unregisterHelper : function (name) {\r\n      this._helpers[name] = undefined;  \r\n      delete this._helpers[name];\r\n    },\r\n\r\n    registerPartial : function (name, template) {\r\n      this._partials[name] = { \r\n        \"template\" : template \r\n      };\r\n    },\r\n\r\n    unregisterPartial : function (name) {\r\n      if (this._partials[name]) {\r\n        this._partials[name] = undefined;\r\n        delete this._partials[name];\r\n      }\r\n    }\r\n\r\n\r\n  });\r\n\r\n  var defaultTemplater = Templater.defaultTemplater = new Templater();\r\n\r\n  [\r\n    \"registerHelper\",\r\n    \"registerPartial\",\r\n    \"unregisterHelper\",\r\n    \"unregisterPartial\",\r\n    \"render\",\r\n    \"compile\"\r\n  ].forEach(function(fn){\r\n    templating[fn] = function() {\r\n      return Templater.prototype[fn].apply(defaultTemplater,arguments);\r\n    }\r\n  });\r\n\r\n  return templating.Templater = Templater;\r\n});\r\n\r\n\ndefine('skylark-utils-templating/main',[\r\n   \t\"./templating\",\r\n   \t\"./Templater\"\r\n],function(templating){\r\n\treturn templating;\r\n});\ndefine('skylark-utils-templating', ['skylark-utils-templating/main'], function (main) { return main; });\n\n"]}