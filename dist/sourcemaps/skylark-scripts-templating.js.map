{"version":3,"sources":["skylark-scripts-templating.js"],"names":["define","skylark","attach","helpers","types","templating","each","items","options","ret","i","isFunction","call","this","isArray","hash","reverse","length","templater","fn","first","last","index","key","inverse","if","express","data","join","delimiter","js","expression","func","indexOf","eval","js_compare","condition","partial","partialName","ctx","p","_partials","template","compiled","compile","Object","keys","forEach","hashName","root","unless","with","context","objects","Evented","eachHelper","ifHelper","joinHelper","jsHelper","jsCompareHelper","partialHelper","unlessHelper","withHelper","helperToSlices","string","shiftIndex","j","helperParts","replace","split","slices","part","push","match","hashParts","hashContent","Templater","inherit","klassName","init","_options","_helpers","mixin","_cache","getCompileFn","block","depth","content","getCompileInverse","inverseContent","getCompileVar","name","variable","parts","levelsUp","newDepth","isFinite","getCompiledArguments","contextArray","arr","t","Error","blocks","_blocks","type","contextName","helperSlices","helperName","isPartial","helperContext","helperHash","slice","helperContent","elseContent","toSkip","foundClosed","foundElse","stringToBlocks","resultString","compiledArguments","JSON","stringify","window","apply","arguments","render","registerHelper","unregisterHelper","undefined","registerPartial","unregisterPartial","defaultTemplater","prototype","main"],"mappings":"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","file":"../skylark-scripts-templating.js","sourcesContent":["define('skylark-scripts-templating/templating',[\r\n  \"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"scripts.templating\", {\r\n\t\thelpers : {}\r\n\t});\r\n});\ndefine('skylark-scripts-templating/helpers/each',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.each =  function (items, options) {\r\n    var ret = '', i = 0;\r\n    if (types.isFunction(items)) { \r\n      items = items.call(this); \r\n    }\r\n    if (types.isArray(items)) {\r\n      if (options.hash.reverse) {\r\n        items = items.reverse();\r\n      }\r\n      for (i = 0; i < items.length; i++) {\r\n        items[i].templater = this.templater;\r\n        ret += options.fn(items[i], {\r\n          first: i === 0, \r\n          last: i === items.length - 1, \r\n          index: i\r\n        });\r\n      }\r\n      if (options.hash.reverse) {\r\n        items = items.reverse();\r\n      }\r\n    } else {\r\n      for (var key in items) {\r\n        i++;\r\n        items[key].templater = this.templater;\r\n        ret += options.fn(items[key], {key: key});\r\n      }\r\n    }\r\n    if (i > 0) {\r\n      return ret;\r\n    } else {\r\n      return options.inverse(this);\r\n    }\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/if',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.if =  function (express, options) {\r\n      if (types.isFunction(express)) { \r\n      \texpress = express.call(this); \r\n      }\r\n      if (express) {\r\n        return options.fn(this, options.data);\r\n      }  else {\r\n        return options.inverse(this, options.data);\r\n      }\r\n    };\r\n});\ndefine('skylark-scripts-templating/helpers/join',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.join =  function (items, options) {\r\n    if (types.isFunction(items)) { \r\n      items = items.call(this); \r\n    }\r\n    return items.join(options.hash.delimiter);\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/js',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.js =  function (expression, options) {\r\n    var func;\r\n    if (expression.indexOf('return')>=0) {\r\n      func = '(function(){'+expression+'})';\r\n    } else {\r\n      func = '(function(){return ('+expression+')})';\r\n    }\r\n    return eval.call(this, func).call(this);\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/js_compare',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.js_compare =  function (expression, options) {\r\n    var func;\r\n    if (expression.indexOf('return')>=0) {\r\n      func = '(function(){'+expression+'})';\r\n    } else {\r\n      func = '(function(){return ('+expression+')})';\r\n    }\r\n    var condition = eval.call(this, func).call(this);\r\n    if (condition) {\r\n      return options.fn(this,options.data);\r\n    } else {\r\n      return options.inverse(this,options.data);   \r\n    }\r\n  };\r\n\r\n});\ndefine('skylark-scripts-templating/helpers/partial',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.partial =  function (partialName, options) {\r\n    const ctx = this;\r\n    const p = this.templater._partials[partialName];\r\n    if (!p || (p && !p.template)) {\r\n      return '';\r\n    }\r\n    if (!p.compiled) {\r\n      p.compiled = this.templater.compile(p.template);\r\n    }\r\n    Object.keys(options.hash).forEach(function(hashName) {\r\n      ctx[hashName] = options.hash[hashName];\r\n    });\r\n    return p.compiled(ctx, options.data, options.root);\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/unless',[\r\n  \"skylark-langx/types\",\r\n  \"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.unless =  function (express, options) {\r\n    if (types.isFunction(express)) { \r\n      express = express.call(this); \r\n    }\r\n    if (!express) {\r\n      return options.fn(this, options.data);\r\n    } else {\r\n      return options.inverse(this, options.data);\r\n    }\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/with',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.with =  function (context, options) {\r\n    if (types.isFunction(context)) { \r\n      context = context.call(this); \r\n    }\r\n    return options.fn(context);\r\n  };\r\n});\ndefine('skylark-scripts-templating/Templater',[\r\n  \"skylark-langx/types\",\r\n  \"skylark-langx/objects\",\r\n  \"skylark-langx/Evented\",\r\n  \"./templating\",\r\n  \"./helpers/each\",\r\n  \"./helpers/if\",\r\n  \"./helpers/join\",\r\n  \"./helpers/js\",\r\n  \"./helpers/js_compare\",\r\n  \"./helpers/partial\",\r\n  \"./helpers/unless\",\r\n  \"./helpers/with\"\r\n],function(\r\n  types, \r\n  objects, \r\n  Evented, \r\n  templating,\r\n  eachHelper, \r\n  ifHelper,\r\n  joinHelper,\r\n  jsHelper,\r\n  jsCompareHelper,\r\n  partialHelper,\r\n  unlessHelper,\r\n  withHelper){\r\n\r\n  \"use strict\";\r\n\r\n  var cache = {};\r\n  function helperToSlices(string) {\r\n    var helperParts = string.replace(/[{}#}]/g, '').split(' ');\r\n    var slices = [];\r\n    var shiftIndex, i, j;\r\n    for (i = 0; i < helperParts.length; i++) {\r\n      var part = helperParts[i];\r\n      if (i === 0) slices.push(part);\r\n      else {\r\n        if (part.indexOf('\"') === 0) {\r\n          // Plain String\r\n          if (part.match(/\"/g).length === 2) {\r\n            // One word string\r\n            slices.push(part);\r\n          }\r\n          else {\r\n            // Find closed Index\r\n            shiftIndex = 0;\r\n            for (j = i + 1; j < helperParts.length; j++) {\r\n              part += ' ' + helperParts[j];\r\n              if (helperParts[j].indexOf('\"') >= 0) {\r\n                shiftIndex = j;\r\n                slices.push(part);\r\n                break;\r\n              }\r\n            }\r\n            if (shiftIndex) i = shiftIndex;\r\n          }\r\n        }\r\n        else {\r\n          if (part.indexOf('=') > 0) {\r\n            // Hash\r\n            var hashParts = part.split('=');\r\n            var hashName = hashParts[0];\r\n            var hashContent = hashParts[1];\r\n            if (hashContent.match(/\"/g).length !== 2) {\r\n              shiftIndex = 0;\r\n              for (j = i + 1; j < helperParts.length; j++) {\r\n                hashContent += ' ' + helperParts[j];\r\n                if (helperParts[j].indexOf('\"') >= 0) {\r\n                  shiftIndex = j;\r\n                  break;\r\n                }\r\n              }\r\n              if (shiftIndex) i = shiftIndex;\r\n            }\r\n            var hash = [hashName, hashContent.replace(/\"/g,'')];\r\n            slices.push(hash);\r\n          }\r\n          else {\r\n            // Plain variable\r\n            slices.push(part);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return slices;\r\n  }\r\n  function stringToBlocks(string) {\r\n    var blocks = [], i, j, k;\r\n    if (!string) return [];\r\n    var _blocks = string.split(/({{[^{^}]*}})/);\r\n    for (i = 0; i < _blocks.length; i++) {\r\n      var block = _blocks[i];\r\n      if (block === '') continue;\r\n      if (block.indexOf('{{') < 0) {\r\n        blocks.push({\r\n          type: 'plain',\r\n          content: block\r\n        });\r\n      } else {\r\n        if (block.indexOf('{/') >= 0) {\r\n          continue;\r\n        }\r\n        if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {\r\n          // Simple variable\r\n          blocks.push({\r\n            type: 'variable',\r\n            contextName: block.replace(/[{}]/g, '')\r\n          });\r\n          continue;\r\n        }\r\n        // Helpers\r\n        var helperSlices = helperToSlices(block);\r\n        var helperName = helperSlices[0];\r\n        var isPartial = helperName === '>';\r\n        var helperContext = [];\r\n        var helperHash = {};\r\n        for (j = 1; j < helperSlices.length; j++) {\r\n          var slice = helperSlices[j];\r\n          if (types.isArray(slice)) {\r\n            // Hash\r\n            helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];\r\n          }\r\n          else {\r\n            helperContext.push(slice);\r\n          }\r\n        }\r\n\r\n        if (block.indexOf('{#') >= 0) {\r\n          // Condition/Helper\r\n          var helperStartIndex = i;\r\n          var helperContent = '';\r\n          var elseContent = '';\r\n          var toSkip = 0;\r\n          var shiftIndex;\r\n          var foundClosed = false, foundElse = false, foundClosedElse = false, depth = 0;\r\n          for (j = i + 1; j < _blocks.length; j++) {\r\n            if (_blocks[j].indexOf('{{#') >= 0) {\r\n              depth ++;\r\n            }\r\n            if (_blocks[j].indexOf('{{/') >= 0) {\r\n              depth --;\r\n            }\r\n            if (_blocks[j].indexOf('{{#' + helperName) >= 0) {\r\n              helperContent += _blocks[j];\r\n              if (foundElse) elseContent += _blocks[j];\r\n              toSkip ++;\r\n            }\r\n            else if (_blocks[j].indexOf('{{/' + helperName) >= 0) {\r\n              if (toSkip > 0) {\r\n                toSkip--;\r\n                helperContent += _blocks[j];\r\n                if (foundElse) elseContent += _blocks[j];\r\n              }\r\n              else {\r\n                shiftIndex = j;\r\n                foundClosed = true;\r\n                break;\r\n              }\r\n            }\r\n            else if (_blocks[j].indexOf('else') >= 0 && depth === 0) {\r\n              foundElse = true;\r\n            }\r\n            else {\r\n              if (!foundElse) helperContent += _blocks[j];\r\n              if (foundElse) elseContent += _blocks[j];\r\n            }\r\n\r\n          }\r\n          if (foundClosed) {\r\n            if (shiftIndex) i = shiftIndex;\r\n            blocks.push({\r\n              type: 'helper',\r\n              helperName: helperName,\r\n              contextName: helperContext,\r\n              content: helperContent,\r\n              inverseContent: elseContent,\r\n              hash: helperHash\r\n            });\r\n          }\r\n        } else if (block.indexOf(' ') > 0) {\r\n          if (isPartial) {\r\n            helperName = 'partial';\r\n            if (helperContext[0]) {\r\n              if (helperContext[0].indexOf('[') === 0) {\r\n                helperContext[0] = helperContext[0].replace(/[[\\]]/g, '');\r\n              } else {\r\n                helperContext[0] = helperContext[0].replace(/\"|'/g, '');\r\n              }\r\n            }\r\n          }\r\n\r\n          blocks.push({\r\n            type: 'helper',\r\n            helperName: helperName,\r\n            contextName: helperContext,\r\n            hash: helperHash\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return blocks;\r\n  }\r\n\r\n\r\n  var Templater = Evented.inherit({\r\n    klassName : \"Templater\",\r\n\r\n    init : function(options,helpers) {\r\n      this._options = options || {};\r\n      this._helpers = objects.mixin({\r\n        \"each\" : eachHelper,\r\n        \"if\" : ifHelper,\r\n        \"join\" : joinHelper,\r\n        \"js\" : jsHelper,\r\n        \"js_compare\" : jsCompareHelper,\r\n        \"partial\" : partialHelper,\r\n        \"unless\" : unlessHelper,\r\n        \"with\" : withHelper,\r\n      },helpers);\r\n\r\n      this._partials = {};\r\n      this._cache = {};\r\n\r\n    },\r\n    compile : function(template) {\r\n      var templater = this;\r\n\r\n      function getCompileFn(block, depth) {\r\n        if (block.content) return compile(block.content, depth);\r\n        else return function () {return ''; };\r\n      }\r\n      function getCompileInverse(block, depth) {\r\n        if (block.inverseContent) return compile(block.inverseContent, depth);\r\n        else return function () {return ''; };\r\n      }\r\n      function getCompileVar(name, ctx) {\r\n        var variable, parts, levelsUp = 0, initialCtx = ctx;\r\n        if (name.indexOf('../') === 0) {\r\n          levelsUp = name.split('../').length - 1;\r\n          var newDepth = ctx.split('_')[1] - levelsUp;\r\n          ctx = 'ctx_' + (newDepth >= 1 ? newDepth : 1);\r\n          parts = name.split('../')[levelsUp].split('.');\r\n        }\r\n        else if (name.indexOf('@global') === 0) {\r\n          ctx = '$.Template7.global';\r\n          parts = name.split('@global.')[1].split('.');\r\n        }\r\n        else if (name.indexOf('@root') === 0) {\r\n          ctx = 'ctx_1';\r\n          parts = name.split('@root.')[1].split('.');\r\n        }\r\n        else {\r\n          parts = name.split('.');\r\n        }\r\n        variable = ctx;\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          if (part.indexOf('@') === 0) {\r\n            if (i > 0) {\r\n              variable += '[(data && data.' + part.replace('@', '') + ')]';\r\n            }\r\n            else {\r\n              variable = '(data && data.' + name.replace('@', '') + ')';\r\n            }\r\n          }\r\n          else {\r\n            if (isFinite(part)) {\r\n              variable += '[' + part + ']';\r\n            }\r\n            else {\r\n              if (part.indexOf('this') === 0) {\r\n                variable = part.replace('this', ctx);\r\n              }\r\n              else {\r\n                variable += '.' + part;       \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return variable;\r\n      }\r\n      function getCompiledArguments(contextArray, ctx) {\r\n        var arr = [];\r\n        for (var i = 0; i < contextArray.length; i++) {\r\n          if (contextArray[i].indexOf('\"') === 0) arr.push(contextArray[i]);\r\n          else {\r\n            arr.push(getCompileVar(contextArray[i], ctx));\r\n          }\r\n        }\r\n        return arr.join(', ');\r\n      }\r\n      function compile(template, depth) {\r\n        depth = depth || 1;\r\n        template = template || t.template;\r\n        if (typeof template !== 'string') {\r\n          throw new Error('Template7: Template must be a string');\r\n        }\r\n        var blocks = stringToBlocks(template);\r\n        if (blocks.length === 0) {\r\n          return function () { return ''; };\r\n        }\r\n        var ctx = 'ctx_' + depth;\r\n        var resultString = '(function (' + ctx + ', data) {\\n';\r\n        if (depth === 1) {\r\n          resultString += ctx + '.templater = this\\n';\r\n          resultString += 'function isArray(arr){return Object.prototype.toString.apply(arr) === \\'[object Array]\\';}\\n';\r\n          resultString += 'function isFunction(func){return (typeof func === \\'function\\');}\\n';\r\n          resultString += 'function c(val, ctx) {if (typeof val !== \"undefined\") {if (isFunction(val)) {return val.call(ctx);} else return val;} else return \"\";}\\n';\r\n        }\r\n        resultString += 'var r = \\'\\';\\n';\r\n        var i, j, context;\r\n        for (i = 0; i < blocks.length; i++) {\r\n          var block = blocks[i];\r\n          // Plain block\r\n          if (block.type === 'plain') {\r\n            resultString += 'r +=\\'' + (block.content).replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/'/g, '\\\\' + '\\'') + '\\';';\r\n            continue;\r\n          }\r\n          var variable, compiledArguments;\r\n          // Variable block\r\n          if (block.type === 'variable') {\r\n            variable = getCompileVar(block.contextName, ctx);\r\n            resultString += 'r += c(' + variable + ', ' + ctx + ');';\r\n          }\r\n          // Helpers block\r\n          if (block.type === 'helper') {\r\n            if (block.helperName in templater._helpers) {\r\n              compiledArguments = getCompiledArguments(block.contextName, ctx);\r\n              resultString += 'r += '+ ctx + '.templater._helpers.' + block.helperName + '.call(' + ctx + ', '  + (compiledArguments && (compiledArguments + ', ')) +'{hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n            }\r\n            else {\r\n              if (block.contextName.length > 0) {\r\n                throw new Error('Missing helper: \"' + block.helperName + '\"');\r\n              } else {\r\n                variable = getCompileVar(block.helperName, ctx);\r\n                resultString += 'if (' + variable + ') {';\r\n                resultString += 'if (isArray(' + variable + ')) {';\r\n                resultString += 'r += '+ ctx + '.templater._helpers.each.call(' + ctx + ', '  + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n                resultString += '}else {';\r\n                resultString += 'r += '+ ctx + '.templater._helpers.with.call(' + ctx + ', '  + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n                resultString += '}}';\r\n              }\r\n            }\r\n          }\r\n        }\r\n        resultString += '\\nreturn r;})';\r\n        return eval.call(window, resultString);\r\n      }\r\n\r\n      var compiled = this._cache[template];\r\n      if (!compiled) {\r\n        var fn = compile(template);\r\n        compiled = this._cache[template] = function(){\r\n          return fn.apply(templater,arguments);\r\n        };\r\n      }\r\n      return compiled;\r\n    },\r\n\r\n    render : function(template,data) {\r\n      var compiled = this.compile(template);\r\n      return compiled(data);\r\n    },\r\n\r\n    registerHelper : function (name, fn) {\r\n      this._helpers[name] = fn;\r\n    },\r\n    \r\n    unregisterHelper : function (name) {\r\n      this._helpers[name] = undefined;  \r\n      delete this._helpers[name];\r\n    },\r\n\r\n    registerPartial : function (name, template) {\r\n      this._partials[name] = { \r\n        \"template\" : template \r\n      };\r\n    },\r\n\r\n    unregisterPartial : function (name) {\r\n      if (this._partials[name]) {\r\n        this._partials[name] = undefined;\r\n        delete this._partials[name];\r\n      }\r\n    }\r\n\r\n\r\n  });\r\n\r\n  var defaultTemplater = Templater.defaultTemplater = new Templater();\r\n\r\n  [\r\n    \"registerHelper\",\r\n    \"registerPartial\",\r\n    \"unregisterHelper\",\r\n    \"unregisterPartial\",\r\n    \"render\",\r\n    \"compile\"\r\n  ].forEach(function(fn){\r\n    templating[fn] = function() {\r\n      return Templater.prototype[fn].apply(defaultTemplater,arguments);\r\n    }\r\n  });\r\n\r\n  return templating.Templater = Templater;\r\n});\r\n\r\n\ndefine('skylark-scripts-templating/main',[\r\n   \t\"./templating\",\r\n   \t\"./Templater\"\r\n],function(templating){\r\n\treturn templating;\r\n});\ndefine('skylark-scripts-templating', ['skylark-scripts-templating/main'], function (main) { return main; });\n\n"]}