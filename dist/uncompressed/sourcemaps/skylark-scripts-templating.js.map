{"version":3,"sources":["skylark-scripts-templating.js"],"names":[],"mappingsfile":"../skylark-scripts-templating.js","sourcesContent":["define('skylark-scripts-templating/templating',[\r\n  \"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"scripts.templating\", {\r\n\t\thelpers : {}\r\n\t});\r\n});\ndefine('skylark-scripts-templating/helpers/each',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.each =  function (items, options) {\r\n    var ret = '', i = 0;\r\n    if (types.isFunction(items)) { \r\n      items = items.call(this); \r\n    }\r\n    if (types.isArray(items)) {\r\n      if (options.hash.reverse) {\r\n        items = items.reverse();\r\n      }\r\n      for (i = 0; i < items.length; i++) {\r\n        items[i].templater = this.templater;\r\n        ret += options.fn(items[i], {\r\n          first: i === 0, \r\n          last: i === items.length - 1, \r\n          index: i\r\n        });\r\n      }\r\n      if (options.hash.reverse) {\r\n        items = items.reverse();\r\n      }\r\n    } else {\r\n      for (var key in items) {\r\n        i++;\r\n        items[key].templater = this.templater;\r\n        ret += options.fn(items[key], {key: key});\r\n      }\r\n    }\r\n    if (i > 0) {\r\n      return ret;\r\n    } else {\r\n      return options.inverse(this);\r\n    }\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/if',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.if =  function (express, options) {\r\n      if (types.isFunction(express)) { \r\n      \texpress = express.call(this); \r\n      }\r\n      if (express) {\r\n        return options.fn(this, options.data);\r\n      }  else {\r\n        return options.inverse(this, options.data);\r\n      }\r\n    };\r\n});\ndefine('skylark-scripts-templating/helpers/join',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.join =  function (items, options) {\r\n    if (types.isFunction(items)) { \r\n      items = items.call(this); \r\n    }\r\n    return items.join(options.hash.delimiter);\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/js',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.js =  function (expression, options) {\r\n    var func;\r\n    if (expression.indexOf('return')>=0) {\r\n      func = '(function(){'+expression+'})';\r\n    } else {\r\n      func = '(function(){return ('+expression+')})';\r\n    }\r\n    return eval.call(this, func).call(this);\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/js_compare',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.js_compare =  function (expression, options) {\r\n    var func;\r\n    if (expression.indexOf('return')>=0) {\r\n      func = '(function(){'+expression+'})';\r\n    } else {\r\n      func = '(function(){return ('+expression+')})';\r\n    }\r\n    var condition = eval.call(this, func).call(this);\r\n    if (condition) {\r\n      return options.fn(this,options.data);\r\n    } else {\r\n      return options.inverse(this,options.data);   \r\n    }\r\n  };\r\n\r\n});\ndefine('skylark-scripts-templating/helpers/partial',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n\treturn templating.helpers.partial =  function (partialName, options) {\r\n    const ctx = this;\r\n    const p = this.templater._partials[partialName];\r\n    if (!p || (p && !p.template)) {\r\n      return '';\r\n    }\r\n    if (!p.compiled) {\r\n      p.compiled = this.templater.compile(p.template);\r\n    }\r\n    Object.keys(options.hash).forEach(function(hashName) {\r\n      ctx[hashName] = options.hash[hashName];\r\n    });\r\n    return p.compiled(ctx, options.data, options.root);\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/unless',[\r\n  \"skylark-langx/types\",\r\n  \"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.unless =  function (express, options) {\r\n    if (types.isFunction(express)) { \r\n      express = express.call(this); \r\n    }\r\n    if (!express) {\r\n      return options.fn(this, options.data);\r\n    } else {\r\n      return options.inverse(this, options.data);\r\n    }\r\n  };\r\n});\ndefine('skylark-scripts-templating/helpers/with',[\r\n\t\"skylark-langx/types\",\r\n\t\"../templating\"\r\n],function(types,templating){\r\n\r\n  return templating.helpers.with =  function (context, options) {\r\n    if (types.isFunction(context)) { \r\n      context = context.call(this); \r\n    }\r\n    return options.fn(context);\r\n  };\r\n});\ndefine('skylark-scripts-templating/Templater',[\r\n  \"skylark-langx/types\",\r\n  \"skylark-langx/objects\",\r\n  \"skylark-langx/Evented\",\r\n  \"./templating\",\r\n  \"./helpers/each\",\r\n  \"./helpers/if\",\r\n  \"./helpers/join\",\r\n  \"./helpers/js\",\r\n  \"./helpers/js_compare\",\r\n  \"./helpers/partial\",\r\n  \"./helpers/unless\",\r\n  \"./helpers/with\"\r\n],function(\r\n  types, \r\n  objects, \r\n  Evented, \r\n  templating,\r\n  eachHelper, \r\n  ifHelper,\r\n  joinHelper,\r\n  jsHelper,\r\n  jsCompareHelper,\r\n  partialHelper,\r\n  unlessHelper,\r\n  withHelper){\r\n\r\n  \"use strict\";\r\n\r\n  var cache = {};\r\n  function helperToSlices(string) {\r\n    var helperParts = string.replace(/[{}#}]/g, '').split(' ');\r\n    var slices = [];\r\n    var shiftIndex, i, j;\r\n    for (i = 0; i < helperParts.length; i++) {\r\n      var part = helperParts[i];\r\n      if (i === 0) slices.push(part);\r\n      else {\r\n        if (part.indexOf('\"') === 0) {\r\n          // Plain String\r\n          if (part.match(/\"/g).length === 2) {\r\n            // One word string\r\n            slices.push(part);\r\n          }\r\n          else {\r\n            // Find closed Index\r\n            shiftIndex = 0;\r\n            for (j = i + 1; j < helperParts.length; j++) {\r\n              part += ' ' + helperParts[j];\r\n              if (helperParts[j].indexOf('\"') >= 0) {\r\n                shiftIndex = j;\r\n                slices.push(part);\r\n                break;\r\n              }\r\n            }\r\n            if (shiftIndex) i = shiftIndex;\r\n          }\r\n        }\r\n        else {\r\n          if (part.indexOf('=') > 0) {\r\n            // Hash\r\n            var hashParts = part.split('=');\r\n            var hashName = hashParts[0];\r\n            var hashContent = hashParts[1];\r\n            if (hashContent.match(/\"/g).length !== 2) {\r\n              shiftIndex = 0;\r\n              for (j = i + 1; j < helperParts.length; j++) {\r\n                hashContent += ' ' + helperParts[j];\r\n                if (helperParts[j].indexOf('\"') >= 0) {\r\n                  shiftIndex = j;\r\n                  break;\r\n                }\r\n              }\r\n              if (shiftIndex) i = shiftIndex;\r\n            }\r\n            var hash = [hashName, hashContent.replace(/\"/g,'')];\r\n            slices.push(hash);\r\n          }\r\n          else {\r\n            // Plain variable\r\n            slices.push(part);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return slices;\r\n  }\r\n  function stringToBlocks(string) {\r\n    var blocks = [], i, j, k;\r\n    if (!string) return [];\r\n    var _blocks = string.split(/({{[^{^}]*}})/);\r\n    for (i = 0; i < _blocks.length; i++) {\r\n      var block = _blocks[i];\r\n      if (block === '') continue;\r\n      if (block.indexOf('{{') < 0) {\r\n        blocks.push({\r\n          type: 'plain',\r\n          content: block\r\n        });\r\n      } else {\r\n        if (block.indexOf('{/') >= 0) {\r\n          continue;\r\n        }\r\n        if (block.indexOf('{#') < 0 && block.indexOf(' ') < 0 && block.indexOf('else') < 0) {\r\n          // Simple variable\r\n          blocks.push({\r\n            type: 'variable',\r\n            contextName: block.replace(/[{}]/g, '')\r\n          });\r\n          continue;\r\n        }\r\n        // Helpers\r\n        var helperSlices = helperToSlices(block);\r\n        var helperName = helperSlices[0];\r\n        var isPartial = helperName === '>';\r\n        var helperContext = [];\r\n        var helperHash = {};\r\n        for (j = 1; j < helperSlices.length; j++) {\r\n          var slice = helperSlices[j];\r\n          if (types.isArray(slice)) {\r\n            // Hash\r\n            helperHash[slice[0]] = slice[1] === 'false' ? false : slice[1];\r\n          }\r\n          else {\r\n            helperContext.push(slice);\r\n          }\r\n        }\r\n\r\n        if (block.indexOf('{#') >= 0) {\r\n          // Condition/Helper\r\n          var helperStartIndex = i;\r\n          var helperContent = '';\r\n          var elseContent = '';\r\n          var toSkip = 0;\r\n          var shiftIndex;\r\n          var foundClosed = false, foundElse = false, foundClosedElse = false, depth = 0;\r\n          for (j = i + 1; j < _blocks.length; j++) {\r\n            if (_blocks[j].indexOf('{{#') >= 0) {\r\n              depth ++;\r\n            }\r\n            if (_blocks[j].indexOf('{{/') >= 0) {\r\n              depth --;\r\n            }\r\n            if (_blocks[j].indexOf('{{#' + helperName) >= 0) {\r\n              helperContent += _blocks[j];\r\n              if (foundElse) elseContent += _blocks[j];\r\n              toSkip ++;\r\n            }\r\n            else if (_blocks[j].indexOf('{{/' + helperName) >= 0) {\r\n              if (toSkip > 0) {\r\n                toSkip--;\r\n                helperContent += _blocks[j];\r\n                if (foundElse) elseContent += _blocks[j];\r\n              }\r\n              else {\r\n                shiftIndex = j;\r\n                foundClosed = true;\r\n                break;\r\n              }\r\n            }\r\n            else if (_blocks[j].indexOf('else') >= 0 && depth === 0) {\r\n              foundElse = true;\r\n            }\r\n            else {\r\n              if (!foundElse) helperContent += _blocks[j];\r\n              if (foundElse) elseContent += _blocks[j];\r\n            }\r\n\r\n          }\r\n          if (foundClosed) {\r\n            if (shiftIndex) i = shiftIndex;\r\n            blocks.push({\r\n              type: 'helper',\r\n              helperName: helperName,\r\n              contextName: helperContext,\r\n              content: helperContent,\r\n              inverseContent: elseContent,\r\n              hash: helperHash\r\n            });\r\n          }\r\n        } else if (block.indexOf(' ') > 0) {\r\n          if (isPartial) {\r\n            helperName = 'partial';\r\n            if (helperContext[0]) {\r\n              if (helperContext[0].indexOf('[') === 0) {\r\n                helperContext[0] = helperContext[0].replace(/[[\\]]/g, '');\r\n              } else {\r\n                helperContext[0] = helperContext[0].replace(/\"|'/g, '');\r\n              }\r\n            }\r\n          }\r\n\r\n          blocks.push({\r\n            type: 'helper',\r\n            helperName: helperName,\r\n            contextName: helperContext,\r\n            hash: helperHash\r\n          });\r\n        }\r\n      }\r\n    }\r\n    return blocks;\r\n  }\r\n\r\n\r\n  var Templater = Evented.inherit({\r\n    klassName : \"Templater\",\r\n\r\n    init : function(options,helpers) {\r\n      this._options = options || {};\r\n      this._helpers = objects.mixin({\r\n        \"each\" : eachHelper,\r\n        \"if\" : ifHelper,\r\n        \"join\" : joinHelper,\r\n        \"js\" : jsHelper,\r\n        \"js_compare\" : jsCompareHelper,\r\n        \"partial\" : partialHelper,\r\n        \"unless\" : unlessHelper,\r\n        \"with\" : withHelper,\r\n      },helpers);\r\n\r\n      this._partials = {};\r\n      this._cache = {};\r\n\r\n    },\r\n    compile : function(template) {\r\n      var templater = this;\r\n\r\n      function getCompileFn(block, depth) {\r\n        if (block.content) return compile(block.content, depth);\r\n        else return function () {return ''; };\r\n      }\r\n      function getCompileInverse(block, depth) {\r\n        if (block.inverseContent) return compile(block.inverseContent, depth);\r\n        else return function () {return ''; };\r\n      }\r\n      function getCompileVar(name, ctx) {\r\n        var variable, parts, levelsUp = 0, initialCtx = ctx;\r\n        if (name.indexOf('../') === 0) {\r\n          levelsUp = name.split('../').length - 1;\r\n          var newDepth = ctx.split('_')[1] - levelsUp;\r\n          ctx = 'ctx_' + (newDepth >= 1 ? newDepth : 1);\r\n          parts = name.split('../')[levelsUp].split('.');\r\n        }\r\n        else if (name.indexOf('@global') === 0) {\r\n          ctx = '$.Template7.global';\r\n          parts = name.split('@global.')[1].split('.');\r\n        }\r\n        else if (name.indexOf('@root') === 0) {\r\n          ctx = 'ctx_1';\r\n          parts = name.split('@root.')[1].split('.');\r\n        }\r\n        else {\r\n          parts = name.split('.');\r\n        }\r\n        variable = ctx;\r\n        for (var i = 0; i < parts.length; i++) {\r\n          var part = parts[i];\r\n          if (part.indexOf('@') === 0) {\r\n            if (i > 0) {\r\n              variable += '[(data && data.' + part.replace('@', '') + ')]';\r\n            }\r\n            else {\r\n              variable = '(data && data.' + name.replace('@', '') + ')';\r\n            }\r\n          }\r\n          else {\r\n            if (isFinite(part)) {\r\n              variable += '[' + part + ']';\r\n            }\r\n            else {\r\n              if (part.indexOf('this') === 0) {\r\n                variable = part.replace('this', ctx);\r\n              }\r\n              else {\r\n                variable += '.' + part;       \r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        return variable;\r\n      }\r\n      function getCompiledArguments(contextArray, ctx) {\r\n        var arr = [];\r\n        for (var i = 0; i < contextArray.length; i++) {\r\n          if (contextArray[i].indexOf('\"') === 0) arr.push(contextArray[i]);\r\n          else {\r\n            arr.push(getCompileVar(contextArray[i], ctx));\r\n          }\r\n        }\r\n        return arr.join(', ');\r\n      }\r\n      function compile(template, depth) {\r\n        depth = depth || 1;\r\n        template = template || t.template;\r\n        if (typeof template !== 'string') {\r\n          throw new Error('Template7: Template must be a string');\r\n        }\r\n        var blocks = stringToBlocks(template);\r\n        if (blocks.length === 0) {\r\n          return function () { return ''; };\r\n        }\r\n        var ctx = 'ctx_' + depth;\r\n        var resultString = '(function (' + ctx + ', data) {\\n';\r\n        if (depth === 1) {\r\n          resultString += ctx + '.templater = this\\n';\r\n          resultString += 'function isArray(arr){return Object.prototype.toString.apply(arr) === \\'[object Array]\\';}\\n';\r\n          resultString += 'function isFunction(func){return (typeof func === \\'function\\');}\\n';\r\n          resultString += 'function c(val, ctx) {if (typeof val !== \"undefined\") {if (isFunction(val)) {return val.call(ctx);} else return val;} else return \"\";}\\n';\r\n        }\r\n        resultString += 'var r = \\'\\';\\n';\r\n        var i, j, context;\r\n        for (i = 0; i < blocks.length; i++) {\r\n          var block = blocks[i];\r\n          // Plain block\r\n          if (block.type === 'plain') {\r\n            resultString += 'r +=\\'' + (block.content).replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/'/g, '\\\\' + '\\'') + '\\';';\r\n            continue;\r\n          }\r\n          var variable, compiledArguments;\r\n          // Variable block\r\n          if (block.type === 'variable') {\r\n            variable = getCompileVar(block.contextName, ctx);\r\n            resultString += 'r += c(' + variable + ', ' + ctx + ');';\r\n          }\r\n          // Helpers block\r\n          if (block.type === 'helper') {\r\n            if (block.helperName in templater._helpers) {\r\n              compiledArguments = getCompiledArguments(block.contextName, ctx);\r\n              resultString += 'r += '+ ctx + '.templater._helpers.' + block.helperName + '.call(' + ctx + ', '  + (compiledArguments && (compiledArguments + ', ')) +'{hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n            }\r\n            else {\r\n              if (block.contextName.length > 0) {\r\n                throw new Error('Missing helper: \"' + block.helperName + '\"');\r\n              } else {\r\n                variable = getCompileVar(block.helperName, ctx);\r\n                resultString += 'if (' + variable + ') {';\r\n                resultString += 'if (isArray(' + variable + ')) {';\r\n                resultString += 'r += '+ ctx + '.templater._helpers.each.call(' + ctx + ', '  + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n                resultString += '}else {';\r\n                resultString += 'r += '+ ctx + '.templater._helpers.with.call(' + ctx + ', '  + variable + ', {hash:' + JSON.stringify(block.hash) + ', data: data || {}, fn: ' + getCompileFn(block, depth+1) + ', inverse: ' + getCompileInverse(block, depth+1) + ', root: ctx_1});';\r\n                resultString += '}}';\r\n              }\r\n            }\r\n          }\r\n        }\r\n        resultString += '\\nreturn r;})';\r\n        return eval.call(window, resultString);\r\n      }\r\n\r\n      var compiled = this._cache[template];\r\n      if (!compiled) {\r\n        var fn = compile(template);\r\n        compiled = this._cache[template] = function(){\r\n          return fn.apply(templater,arguments);\r\n        };\r\n      }\r\n      return compiled;\r\n    },\r\n\r\n    render : function(template,data) {\r\n      var compiled = this.compile(template);\r\n      return compiled(data);\r\n    },\r\n\r\n    registerHelper : function (name, fn) {\r\n      this._helpers[name] = fn;\r\n    },\r\n    \r\n    unregisterHelper : function (name) {\r\n      this._helpers[name] = undefined;  \r\n      delete this._helpers[name];\r\n    },\r\n\r\n    registerPartial : function (name, template) {\r\n      this._partials[name] = { \r\n        \"template\" : template \r\n      };\r\n    },\r\n\r\n    unregisterPartial : function (name) {\r\n      if (this._partials[name]) {\r\n        this._partials[name] = undefined;\r\n        delete this._partials[name];\r\n      }\r\n    }\r\n\r\n\r\n  });\r\n\r\n  var defaultTemplater = Templater.defaultTemplater = new Templater();\r\n\r\n  [\r\n    \"registerHelper\",\r\n    \"registerPartial\",\r\n    \"unregisterHelper\",\r\n    \"unregisterPartial\",\r\n    \"render\",\r\n    \"compile\"\r\n  ].forEach(function(fn){\r\n    templating[fn] = function() {\r\n      return Templater.prototype[fn].apply(defaultTemplater,arguments);\r\n    }\r\n  });\r\n\r\n  return templating.Templater = Templater;\r\n});\r\n\r\n\ndefine('skylark-scripts-templating/main',[\r\n   \t\"./templating\",\r\n   \t\"./Templater\"\r\n],function(templating){\r\n\treturn templating;\r\n});\ndefine('skylark-scripts-templating', ['skylark-scripts-templating/main'], function (main) { return main; });\n\n"]}